---

# net.core.rmem_max = 2500000

- name: Install podman
  ansible.builtin.package:
    name: "{{ podman_packages }}"
    state: present

# - name: Enable podman.sock
#   ansible.builtin.service:
#     name: podman.socket
#     state: started
#     enabled: true
#   tags:
#     - pre_tasks
#     - podman

- name: Create the podman group
  ansible.builtin.group:
    name: "{{ podman_group }}"
    state: present

- name: Create the podman user
  ansible.builtin.user:
    name: "{{ podman_user }}"
    state: present
    group: "{{ podman_group }}"
    home: "{{ podman_user_home }}"
    createhome: true

- name: Add podman user to the podman group
  ansible.builtin.user:
    name: "{{ podman_user }}"
    groups: "{{ podman_group }}"
    append: true

- name: Find uid of user
  become: true
  become_user: "{{ podman_user }}"
  ansible.builtin.command: "id -u"
  register: _container_run_as_uid
  check_mode: false
  changed_when: false

- name: Set XDG_RUNTIME_DIR in podman user .bashrc
  become: true
  become_user: "{{ podman_user }}"
  ansible.builtin.lineinfile:
    path: "{{ podman_user_home + '/.bashrc' }}"
    line: "{{ 'export XDG_RUNTIME_DIR=/run/user/' + _container_run_as_uid.stdout }}"

- name: Enable systemd linger mode for podman user
  ansible.builtin.command:
    cmd: loginctl enable-linger {{ podman_user }}
    creates: "{{ '/var/lib/systemd/linger/' + podman_user }}"

- name: Create podman container base for rootless operations
  ansible.builtin.file:
    path: "{{ podman_user_home + '/.local/share/containers' }}"
    state: directory
    owner: "{{ podman_user }}"
    group: "{{ podman_group }}"
    mode: '0700'
  register: _container_dir

- name: Substitute file contexts for path podman .local/share/containers with /var/lib/containers
  community.general.sefcontext:
    target: "{{ podman_user_home + '/.local/share/containers' }}"
    substitute: /var/lib/containers
    state: present
  register: _container_dir_substitute

- name: Run restore context for .local/share/containers with /var/lib/containers to reload selinux
  ansible.builtin.command:
    cmd: restorecon -F -R -v {{ podman_user_home + '/.local/share/containers' }}
  when: # noqa: no-handler
    - _container_dir_substitute.changed | bool or _container_dir.changed | bool
    - ansible_selinux and ansible_selinux.status == "enabled"
  register: _result
  changed_when: _result.rc != 0

- name: Set selinux policy for podman user home
  community.general.sefcontext:
    target: '{{ item.target }}'
    setype: "{{ item.setype }}"
    reload: true
    state: "{{ item.state }}"
  register: filecontext
  with_items:
    - { target: '{{ container_storage_dir_base + "/" + podman_user }}(/.+)?', setype: 'user_home_dir_t', state: 'present' }
  when: ansible_selinux and ansible_selinux.status == "enabled"

# - ansible.builtin.debug:
#     msg: "{{ filecontext.results[0] }}"

- name: Run restore context to reload selinux
  ansible.builtin.command:
    cmd: restorecon -F -R -v {{ item.target }}
  with_items:
    - { index: 0, target: '{{ container_storage_dir_base + "/" + podman_user }}' }
  when: # noqa: no-handler
    - filecontext.results[item.index] is changed
    - ansible_selinux and ansible_selinux.status == "enabled"
  register: _result
  changed_when: _result.rc != 0

- name: Create podman systemd unit directory for rootless operations
  ansible.builtin.file:
    path: "{{ podman_user_home + '/.config/systemd/user' }}"
    state: directory
    owner: "{{ podman_user }}"
    group: "{{ podman_group }}"
    mode: '0700'

- name: Create podman configurtation directory for rootless operations
  ansible.builtin.file:
    path: "{{ podman_user_home + '/.config/containers' }}"
    state: directory
    owner: "{{ podman_user }}"
    group: "{{ podman_group }}"
    mode: '0700'

- name: Prepare /etc/containers/containers.conf
  ansible.builtin.copy:
    dest: "{{ item }}"
    mode: "0644"
    force: false
    content: |
      # The containers configuration file specifies all of the available configuration
      # command-line options/flags for container engine tools like Podman & Buildah,
      # but in a TOML format that can be easily modified and versioned.
      #
      # Please refer to containers.conf(5) for details of all configuration options.
      # Not all container engines implement all of the options.
      # All of the options have hard coded defaults and these options will override
      # the built in defaults. Users can then override these options via the command
      # line. Container engines will read containers.conf files in up to three
      # locations in the following order:
      #  1. /usr/share/containers/containers.conf
      #  2. /etc/containers/containers.conf
      #  3. $HOME/.config/containers/containers.conf (Rootless containers ONLY)
      #  Items specified in the latter containers.conf, if they exist, override the
      # previous containers.conf settings, or the default settings.
      #
  loop:
    - "/etc/containers/containers.conf"
    - "{{ podman_user_home + '/.config/containers/containers.conf' }}"

- name: Configure timezone
  community.general.ini_file:
    path: "{{ item }}"
    mode: "0644"
    section: containers
    option: tz
    value: '"local"'
    no_extra_spaces: true
  loop:
    - "/etc/containers/containers.conf"
    - "{{ podman_user_home + '/.config/containers/containers.conf' }}"

- name: Prepare /etc/containers/storage.conf
  ansible.builtin.copy:
    dest: "{{ item }}"
    mode: "0644"
    force: false
    content: |
      # This file is the configuration file for all tools
      # that use the containers/storage library. The storage.conf file
      # overrides all other storage.conf files. Container engines using the
      # container/storage library do not inherit fields from other storage.conf
      # files.
      #
      #  Note: The storage.conf file overrides other storage.conf files based on this precedence:
      #      /usr/containers/storage.conf
      #      /etc/containers/storage.conf
      #      $HOME/.config/containers/storage.conf
      #      $XDG_CONFIG_HOME/containers/storage.conf (If XDG_CONFIG_HOME is set)
      # See man 5 containers-storage.conf for more information
      # The "container storage" table contains all of the server options.
      #
  loop:
    - "/etc/containers/storage.conf"
    - "{{ podman_user_home + '/.config/containers/storage.conf' }}"

- name: Configure podman storage global
  community.general.ini_file:
    path: /etc/containers/storage.conf
    mode: "0644"
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
    state: "{{ item.state }}"
    no_extra_spaces: false
  loop:
    - {section: 'storage', option: 'driver', value: '"overlay"', state: 'present'}
    - {section: 'storage.options.overlay', option: 'mount_program', value: '"/usr/bin/fuse-overlayfs"', state: 'absent'}
    # - {section: 'storage.options.overlay', option: 'mount_program', value: '"/usr/bin/fuse-overlayfs"',
      #  state: "{{ 'present' if podman_rootless | bool else 'absent' }}"}

- name: Configure podman storage rootless
  community.general.ini_file:
    path: "{{ podman_user_home + '/.config/containers/storage.conf' }}"
    owner: "{{ podman_user }}"
    group: "{{ podman_group }}"
    mode: "0600"
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
    state: "{{ item.state }}"
    no_extra_spaces: false
  loop:
    - {section: 'storage', option: 'driver', value: '"overlay"', state: 'present'}
    - {section: 'storage.options.overlay', option: 'mount_program', value: '"/usr/bin/fuse-overlayfs"', state: 'absent'}

# looks like subuid and subgid file will be handled automatically
# - name: Set up /etc/subuid for podman user
#   lineinfile:
#     path: /etc/subuid
#     line: "{{ podman_user }}:{{ podman_subuid_range }}"
#     create: true

# - name: Set up /etc/subgid for podman user
#   lineinfile:
#     path: /etc/subgid
#     line: "{{ podman_user }}:{{ podman_subgid_range }}"
#     create: true

- name: "set kernel parameters"
  ansible.posix.sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    sysctl_set: true
    state: present
    reload: true
    sysctl_file: /etc/sysctl.d/podman.conf
  loop:
    - {name: "net.ipv4.ip_unprivileged_port_start", value: "80"}
    - {name: "net.core.rmem_max", value: "2500000"}
    - {name: "net.core.wmem_max", value: "2500000"}

- name: Podman network
  containers.podman.podman_network:
    name: "{{ podman_networks.podman_network_root.podman_network_name }}"
    driver: 'bridge'
    internal: false
    ip_range: "{{ podman_networks.podman_network_root.podman_network_iprange }}"
    subnet: "{{ podman_networks.podman_network_root.podman_network_subnet }}"
    gateway: "{{ podman_networks.podman_network_root.podman_network_gateway }}"
    disable_dns: false
    ipv6: false

- name: Podman network rootless
  become: true
  become_user: "{{ podman_user }}"
  containers.podman.podman_network:
    name: "{{ podman_networks.podman_network_rootless.podman_network_name }}"
    driver: 'bridge'
    internal: false
    ip_range: "{{ podman_networks.podman_network_rootless.podman_network_iprange }}"
    subnet: "{{ podman_networks.podman_network_rootless.podman_network_subnet }}"
    gateway: "{{ podman_networks.podman_network_rootless.podman_network_gateway }}"
    disable_dns: false
    ipv6: false
