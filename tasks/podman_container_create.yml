---

- name: reset _container_create_changed for {{ _container.name }}
  ansible.builtin.set_fact:
    _container_create_changed: false

- name: Include podman_init_vars.yml from sleif.podman
  ansible.builtin.include_tasks: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files: sleif.podman/tasks/includes/podman_init_vars.yml
      paths: "{{ lookup('config', 'DEFAULT_ROLES_PATH') }}"

- name: set fact for socket
  ansible.builtin.set_fact:
    pod_sock_name: "{{ podman_sockets.container }}"
  when: podman_sockets is defined

# include socket create operation
- name: Include role sleif.podman podman_operation podman_socket_create - creates a socket for container
  ansible.builtin.include_role:
    name: sleif.podman
    apply:
      tags:
        - podman_socket_create
  vars:
    podman_operation: podman_socket_create
    podman_socket_name: "{{ _container.name }}"
    podman_socket: "{{ podman_sockets.sockets }}"
  when: podman_sockets is defined and pod_sock_name == _container.name

# include network create operation
- name: Include role sleif.podman podman_operation podman_network_create - creates a network if necessary
  ansible.builtin.include_role:
    name: sleif.podman
    apply:
      tags:
        - podman_network_create
  vars:
    podman_network_name: "{{ item.podman_network_name }}"
    podman_network_subnet: "{{ item.podman_network_subnet }}"
    podman_network_gateway: "{{ item.podman_network_gateway }}"
    podman_network_disabledns: "{{ item.podman_network_disabledns }}"
    podman_operation: podman_network_create
  with_items:
    - "{{ podman_networks }}"
  register: _networks
#  tags: always
  when: podman_networks is defined

- name: Clear podman_network_names to cleanly enumerate networks
  ansible.builtin.set_fact:
    podman_network_names: []
  when: podman_networks is defined

- name: Enumerate of podman_networks.[network].podman_network_name
  ansible.builtin.set_fact:
    podman_network_names: "{{ podman_network_names | default([]) + [ item.podman_network_name  ] }}"
  with_items: "{{ podman_networks }}"
  when: podman_networks is defined

#- name: Debug podman_network_names
#  ansible.builtin.debug:
#    msg: "{{ podman_network_names }}"
#- name: Debug podman_networks
#  ansible.builtin.debug:
#    msg: "{{ podman_networks }}"

- name: Container create block
  become: "{{ podman_rootless | d(true) | bool }}"
  become_user: "{{ podman_user if podman_rootless | d(true) | bool else omit }}"
  tags:
    - podman_container_create
  # when:
  #   - pod_name is defined
  #   - pod_name | length > 0
  block:
    - name: Create persistant container directories for {{ _container.name }}  # noqa: ignore-errors
      become: "{{ podman_rootless | bool }}"
      become_method: containers.podman.podman_unshare
      become_user: "{{ podman_user if podman_rootless | bool else omit }}"
      ansible.builtin.file:
        path: "{{ item.host }}"
        state: directory
        mode: "{{ item.mode | d('0775') }}"
      loop: "{{ _container.volumes | d([]) }}"
      when:
        - item.state | d('directory') == 'directory'
      ignore_errors: true

    - name: Include role sleif.podman podman_operation podman_pod_create - creates a  pod if necessary
      ansible.builtin.include_role:
        name: sleif.podman
        apply:
          tags:
            - podman_pod_create
      vars:
        podman_operation: podman_pod_create
        podman_networks: "{{ _networks if _networks is defined else omit }}"
      tags: always

    - name: Include role sleif.podman podman_operation podman_system_prune - creates a  pod if necessary
      ansible.builtin.include_role:
        name: sleif.podman
        apply:
          tags:
            - podman_system_prune
      vars:
        podman_operation: podman_system_prune
      when:
        - _system_prune | bool
      tags: always

    - name: Create Podman secrets for {{ _container.name }}
      become: "{{ podman_rootless | bool }}"
      become_user: "{{ podman_user if podman_rootless | bool else omit }}"
      containers.podman.podman_secret:
        state: present
        name: "{{ item.name }}"
        data: "{{ item.data }}"
        skip_existing: true
      loop: "{{ _container.secrets | d([]) }}"
      no_log: true
      tags: podman_secrets


    - name: Include role sleif.podman podman_operation podman_image_pull for {{ _container.image.name ~ ':' ~ _container.image.tag }}
      ansible.builtin.include_role:
        name: sleif.podman
        apply:
          tags:
            - podman_image_pull
      vars:
        podman_operation: podman_image_pull
        image_name: "{{ _container.image.name }}"
        image_tag: "{{ _container.image.tag }}"

    - name: Include role sleif.podman podman_operation podman_image_pull for additional images
      ansible.builtin.include_role:
        name: sleif.podman
        apply:
          tags:
            - podman_image_pull
      loop: "{{ _container.additional_images | default([]) }}"
      vars:
        podman_operation: podman_image_pull
        image_name: "{{ item.name }}"
        image_tag: "{{ item.tag }}"

    - name: enumerate _container_create_changed for {{ _container.name }}
      ansible.builtin.set_fact:
        _container_create_changed: "{{ true if _container_create_changed | d(false) | bool or _image_pull_changed | bool else false }}"

    - name: Include role sleif.podman podman_operation podman_image_build for {{ _container.name }}
      ansible.builtin.include_role:
        name: sleif.podman
        apply:
          tags:
            - podman_image_build
      vars:
        podman_operation: podman_image_build
        _build_required: "{{ _container.build_required | d(false) }}"
        _container_name: "{{ _container.name }}"
        _containerfile_content: "{{ _container.containerfile_content }}"
        _image_name: "{{ _container.image.name }}"
        _image_tag: "{{ _container.image.tag }}"

    - name: enumerate _container_create_changed for {{ _container.name }}
      ansible.builtin.set_fact:
        _container_create_changed: "{{ true if _container_create_changed | d(false) | bool or _image_build_changed | d(false) | bool else false }}"

    - name: Set_fact _pod_file_name
      ansible.builtin.set_fact:
        _pod_file_name: "{{ _container.pod | d('') ~ '.pod' if _container.pod | d('') is truthy else '' }}"

    - name: Set_fact _volumes to an empty list
      ansible.builtin.set_fact:
        _volumes: []
    - name: Set_fact _volumes
      ansible.builtin.set_fact:
        _volumes: "{{ _volumes | d([]) + [item.host ~ ':' ~ item.target] }}"
      loop: "{{ _container.volumes | default([]) }}"

    - name: Create container {{ _container.image.name }} as {{ _container.hostname | d(_container.name) }}
      become: "{{ podman_rootless | d(true) | bool }}"
      become_user: "{{ podman_user if podman_rootless | d(true) | bool else omit }}"
      containers.podman.podman_container:
        capabilities: "{{ _container.capabilities | d([]) }}"
        command: "{{ _container.command | default(omit) }}"
        dns_servers: "{{ _container.dns_servers | default(omit) }}"
        env: "{{ _container.env | default(omit) }}"
        hostname: "{{ _container.hostname | d(_container.name) if not _container.pod | d('') is truthy else omit }}"
        image: "{{ _container.build_required | d(false) | bool | ternary('localhost__', '') }}{{ _container.image.name ~ ':' ~ _container.image.tag }}"
        label: "{{ _container.label | default(omit) }}"
        memory: "{{ _container.memory | default(omit) }}"
        name: "{{ _container.name }}"
        # network_aliases: "{{ _container.hostname }}"
# ToDo: enable multiple networks being defined to attach to a container; has to be list of network_names
        network: "{{ _container.network | d(podman_network_name if pod_name | d('') is falsy else []) }}"
        pod: "{{ _pod_file_name if _pod_file_name is truthy else omit }}"
        publish: "{{ _container.publish | default([]) }}"
        # recreate: "{{ podman_container_recreate | d(false) }}"
        # restart_policy: "no"
        quadlet_options:
          - "AutoUpdate=local"
          - |
            [Service]
            Restart=always
            ExecStartPost={{ _container.service.execstartpost | d('') }}
            TimeoutStartSec=900
            [Install]
            WantedBy=default.target
            {{ '[Unit]
            PartOf=' ~ _container.name ~ '.socket' if podman_sockets is defined else '' }}
            {{ quadlet_container_options | d('') }}
        rm: false
        secrets: "{{ _container.secrets | d([]) | map(attribute='name') | list }}"
        state: quadlet
        timezone: "{{ _container.timezone | default('local') }}"
        tmpfs: "{{ _container.tmpfs | default(omit) }}"
        volumes_from: "{{ _container.volumes_from | d([]) }}"
        volumes: "{{ _volumes }}"
        workdir: "{{ _container.workdir | d(omit) }}"
      register: _container_create_quadlet
    # - debug: var=_container_create_quadlet
    # - pause:

    - name: enumerate _container_create_changed for {{ _container.name }}
      ansible.builtin.set_fact:
        _container_create_changed: "{{ true if _container_create_changed | d(false) | bool or _container_create_quadlet.changed | bool else false }}"

    - name: debug _container_create_changed for {{ _container.name }}
      ansible.builtin.debug:
        msg: "container creation for {{ _container.name }} has{{ _container_create_changed | bool | ternary('', ' not') }} changed."

    - name: Include role sleif.podman podman_operation podman_systemd_restart_pod_or_container
      ansible.builtin.include_role:
        name: sleif.podman
        apply:
          tags:
            - podman_systemd_restart_pod_or_container
      vars:
        podman_operation: podman_systemd_restart_pod_or_container
        target: "{{ pod_name if pod_name | d('') is truthy else container_name }}"
        quadlet: "{{ _container_create_quadlet }}"
