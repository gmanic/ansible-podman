---

- name: Include podman_init_vars.yml from sleif.podman
  ansible.builtin.include_tasks: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files: sleif.podman/tasks/includes/podman_init_vars.yml
      paths: "{{ lookup('config', 'DEFAULT_ROLES_PATH') }}"

- name: Pod create block
  become: "{{ podman_rootless | d(true) | bool }}"
  become_user: "{{ podman_user if podman_rootless | d(true) | bool else omit }}"
  tags:
    - podman_pod_create
  when:
    - pod_name | d('') is truthy
  block:
    - name: Pod Create | Gather info about the pod
      containers.podman.podman_pod_info:
        name: "{{ pod_name }}"
      register: _pod_info
    # - debug: var=_pod_info
    # - pause:

    - name: Create persistant container directories  # noqa: ignore-errors
      become: "{{ podman_rootless | bool }}"
      become_method: containers.podman.podman_unshare
      become_user: "{{ podman_user if podman_rootless | bool else omit }}"
      ansible.builtin.file:
        path: "{{ item.host }}"
        state: directory
        mode: "{{ item.mode | d('0775') }}"
      # ignore_errors: true
      loop: "{{ pod_volumes | d([]) }}"
      when:
        - item.state | d('directory') == 'directory'

    - name: Reset _volumes to an empty list
      ansible.builtin.set_fact:
        _pod_volumes: []
    - name: Set_fact _volumes
      ansible.builtin.set_fact:
        _pod_volumes: "{{ _pod_volumes | d([]) + [item.host ~ ':' ~ item.target] }}"
      loop: "{{ pod_volumes | default([]) }}"

    # https://docs.podman.io/en/latest/markdown/podman-systemd.unit.5.html
    - name: Pod create | Create the pod
      containers.podman.podman_pod:
        hostname: "{{ pod_name }}"
        name: "{{ pod_name }}"
        network: "{{ podman_network_name }}"
        publish: "{{ pod_published_ports | default(omit) }}"
        quadlet_options:
          - |
            [Service]
            Restart=always
            TimeoutStartSec=900
            TimeoutStopSec=300
            [Install]
            WantedBy=default.target
        state: quadlet
        volumes: "{{ _pod_volumes }}"
      register: _quadlet_file_status
    # - debug: var=_quadlet_file_status
    # - pause:

    - name: Include tasks from podman_systemd_restart_pod_or_container
      ansible.builtin.include_tasks:
        file: podman_systemd_restart_pod_or_container.yml
      vars:
        target: "{{ pod_name }}"
        quadlet: "{{ _quadlet_file_status }}"
      when:
        - _quadlet_file_status.changed | bool or _pod_info.pods | length == 0
