---

- name: Podman generate systemd become block
  become: "{{ podman_rootless | d(true) | bool }}"
  become_user: "{{ podman_user if podman_rootless | d(true) | bool else omit }}"
  tags:
    - podman_generate_systemd
  block:
    - name: Podman generate systemd | gather info about the pod {{ target }}
      containers.podman.podman_pod_info:
        name: "{{ target }}"
      register: _pod_info
    # - debug: var=_pod_info
    # - debug:
    #     msg: "{{ _pod_info.pods[0].State }}"
    # - pause:

    - name: Podman generate systemd | gather info about the container {{ target }}
      containers.podman.podman_container_info:
        name: "{{ target }}"
      register: _container_info
      when:
        - _pod_info.pods | length == 0
    # - debug: var=_container_info
    # - pause:

    - name: Podman generate systemd | generate _target_state from _pod_info or _container_info
      ansible.builtin.set_fact:
        _target_state: "{{ _pod_info.pods[0].State | lower if _pod_info.pods | length > 0 else _container_info.containers[0].State.Status | lower }}"
    # - debug: var=_target_state
    # - pause:

    - name: Podman generate systemd | generate systemd unit file for {{ target }}
      containers.podman.podman_generate_systemd:
        name: "{{ target }}"
        dest: "{{ _systemd_service_files_dir }}"
        restart_policy: always
        no_header: true
      register: _podman_generate_systemd_result
    # - debug:
    #     msg: "{{ (_podman_generate_systemd_result.systemd_units | dict2items | list | first).key }}"
    # - pause:

    - name: Podman generate systemd | enable systemd service for {{ 'pod-' + target if _pod_info.pods | length > 0 else 'container-' + target }}
      environment:
        XDG_RUNTIME_DIR: "{{ _xdg_runtime_dir }}"
      ansible.builtin.systemd_service:
        name: "{{ 'pod-' + target if _pod_info.pods | length > 0 else 'container-' + target }}"
        daemon_reload: true
        enabled: true
        force: false
        scope: "{{ _systemd_scope }}"
      when:
        - _podman_generate_systemd_result.changed | bool # noqa: no-handler

    - name: Podman generate systemd | start/restart systemd service for {{ 'pod-' + target if _pod_info.pods | length > 0 else 'container-' + target }}
      environment:
        XDG_RUNTIME_DIR: "{{ _xdg_runtime_dir }}"
      ansible.builtin.systemd_service:
        name: "{{ 'pod-' + target if _pod_info.pods | length > 0 else 'container-' + target }}"
        # daemon_reload: true
        # enabled: true
        scope: "{{ _systemd_scope }}"
        state: "{{ 'restarted' if _podman_generate_systemd_result.changed | bool or _target_state != 'running' else 'started' }}"
